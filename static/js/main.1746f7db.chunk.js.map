{"version":3,"sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/App.jsx","index.js"],"names":["StatisticsSection","styled","section","Section","title","children","Button","button","FeedbackOptions","options","onLeaveFeedback","map","option","name","onClick","NotificationMessage","h2","Notification","message","List","ul","Statistics","good","neutral","bad","total","positivePercentage","App","state","props","initialValue","event","grade","currentTarget","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","goodPercentage","Math","round","this","Object","keys","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAEaA,EAAoBC,IAAOC,QAAV,iH,OCCjBC,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACrB,eAACL,EAAD,WACE,6BAAKI,IACJC,MCJQC,EAASL,IAAOM,OAAV,uMCCNC,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OAC7B,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,cAACN,EAAD,CAAqBO,KAAMD,EAAQE,QAASJ,EAA5C,SACGE,GADUA,SCJNG,EAAsBd,IAAOe,GAAV,wFCCnBC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,cAACH,EAAD,UAAsBG,KCDtDC,EAAOlB,IAAOmB,GAAV,iECCJC,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACxB,eAACP,EAAD,WACE,wCAAWG,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,sDAAyBC,EAAzB,WCHSC,EAAb,4MAKEC,MAAQ,CACNN,KAAM,EAAKO,MAAMC,aACjBP,QAAS,EAAKM,MAAMC,aACpBN,IAAK,EAAKK,MAAMC,cARpB,EAWEpB,gBAAkB,SAAAqB,GAChB,IAAMC,EAAQD,EAAME,cAAcpB,KAElC,EAAKqB,UAAS,SAAAC,GAAS,sBACpBH,EAAQG,EAAUH,GAAS,OAflC,EAmBEI,mBAAqB,WACnB,MAA+B,EAAKR,MAEpC,OAFA,EAAQN,KAAR,EAAcC,QAAd,EAAuBC,KApB3B,EAyBEa,gCAAkC,WAChC,IAAQf,EAAS,EAAKM,MAAdN,KACFG,EAAQ,EAAKW,qBACbE,EAAiBhB,EAAe,IAAPA,EAAcG,EAAQ,EAErD,OAAOc,KAAKC,MAAMF,IA9BtB,4CAiCE,WACE,MAA+BG,KAAKb,MAA5BN,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBf,EAAUiC,OAAOC,KAAKF,KAAKb,OAC3BH,EAAQgB,KAAKL,qBACbV,EAAqBe,KAAKJ,kCAEhC,OACE,qCACE,cAAC,EAAD,CAASjC,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBK,QAASA,EAASC,gBAAiB+B,KAAK/B,oBAE1De,EACC,cAAC,EAAD,CAASrB,MAAM,aAAf,SACE,cAAC,EAAD,CACEkB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,MAIxB,cAAC,EAAD,CAAcR,QAAQ,6BAvDhC,GAAyB0B,aAAZjB,EACJkB,aAAe,CACpBf,aAAc,GCHlBgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1746f7db.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const StatisticsSection = styled.section`\n  font-size: 18px;\n\n  & > h2 {\n    color: chartreuse;\n    font-size: 20px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StatisticsSection } from './Section.styled';\n\nexport const Section = ({ title, children }) => (\n  <StatisticsSection>\n    <h2>{title}</h2>\n    {children}\n  </StatisticsSection>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n","import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  width: 100px;\n  margin: 0 20px;\n  padding: 10px 20px;\n  background-color: yellow;\n  color: blue;\n  font-size: 16px;\n  border-radius: 12px;\n  border-color: blue;\n`;\n","import PropTypes from 'prop-types';\nimport { Button } from './FeedbackOptions.styled';\n\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <>\n    {options.map(option => (\n      <Button key={option} name={option} onClick={onLeaveFeedback}>\n        {option}\n      </Button>\n    ))}\n  </>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const NotificationMessage = styled.h2`\n  margin-left: 20px;\n  font-size: 20px;\n  color: tomato;\n`;\n","import PropTypes from 'prop-types';\nimport { NotificationMessage } from './Notification.styled';\n\nexport const Notification = ({ message }) => <NotificationMessage>{message}</NotificationMessage>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style: none;\n  color: blue;\n`;\n","import PropTypes from 'prop-types';\nimport { List } from './Statistics.styled';\n\nexport const Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <List>\n    <li>Good: {good}</li>\n    <li>Neutral: {neutral}</li>\n    <li>Bad: {bad}</li>\n    <li>Total: {total}</li>\n    <li>PositivePercentage: {positivePercentage}%</li>\n  </List>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import { Component } from 'react';\nimport { Section } from 'components/Section/Section';\nimport { FeedbackOptions } from 'components/FeedbackOptions/FeedbackOptions';\nimport { Notification } from 'components/Notification/Notification';\nimport { Statistics } from 'components/Statistics/Statistics';\n\nexport class App extends Component {\n  static defaultProps = {\n    initialValue: 0,\n  };\n\n  state = {\n    good: this.props.initialValue,\n    neutral: this.props.initialValue,\n    bad: this.props.initialValue,\n  };\n\n  onLeaveFeedback = event => {\n    const grade = event.currentTarget.name;\n\n    this.setState(prevState => ({\n      [grade]: prevState[grade] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    const goodPercentage = good ? (good * 100) / total : 0;\n\n    return Math.round(goodPercentage);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const options = Object.keys(this.state);\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={options} onLeaveFeedback={this.onLeaveFeedback} />\n        </Section>\n        {total ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}